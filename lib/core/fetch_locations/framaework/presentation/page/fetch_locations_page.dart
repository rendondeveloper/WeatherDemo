import 'package:flutter/material.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import 'package:weatherdemo/core/fetch_locations/domain/models_domain/locations_domain.dart';import 'package:weatherdemo/core/fetch_locations/framaework/di/fetch_locations_di.dart';import 'package:weatherdemo/core/fetch_locations/framaework/presentation/page/uiModels/fetch_location_state.dart';import 'package:weatherdemo/core/fetch_locations/framaework/presentation/page/widgets/input_search_widget.dart';import 'package:weatherdemo/core/utils/commons/colors_app.dart';import 'package:weatherdemo/core/utils/commons/dimens_app.dart';import 'package:weatherdemo/core/utils/extension_function/context_extension.dart';import 'package:weatherdemo/core/utils/transport/transport_coordinates.dart';class FetchLocationsPage extends ConsumerStatefulWidget {  void Function(TransportCoordinates) callback;  FetchLocationsPage(this.callback, {super.key});  @override  ConsumerState<ConsumerStatefulWidget> createState() => _FetchLocationsPage();}class _FetchLocationsPage extends ConsumerState<FetchLocationsPage> {  final TextEditingController _controller = TextEditingController();  final FocusNode _focusNode = FocusNode();  @override  Widget build(BuildContext context) {    final notifier = ref.watch(searchProviderStateProvider);    return Column(      children: [        InputSearchWidget(          fieldFocusNode: _focusNode,          controller: _controller,          hintText: context.getText().homeWeatherInputSearch,          inputType: TextInputType.text,          maxLines: 1,          icon: const Icon(Icons.search),          isLoading: notifier.isLoading,          onValueChanged: (text) {            ref.read(searchProviderStateProvider.notifier).searchLocation(text);          },        ),        Visibility(            visible: notifier.locations.isNotEmpty,            child: Container(                width: double.infinity,                height: homeWeatherSuggestionListHeight,                decoration: const BoxDecoration(                  color: backgroundLocationsList,                  borderRadius: BorderRadius.only(bottomRight: Radius.circular(radiusCorner4), bottomLeft: Radius.circular(radiusCorner4)),                ),                child: StreamBuilder(                    stream: ref.watch(searchProviderStateProvider.notifier).stream,                    builder: (context, snapshot) {                      final locations = snapshot.hasData ? (snapshot.data as FetchLocationState).locations : [];                      return ListView.separated(                        shrinkWrap: true,                        keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.onDrag,                        itemCount: locations.length,                        itemBuilder: (context, index) {                          final item = locations[index] as LocationDomain;                          return InkWell(                            onTap: () {                              widget.callback(TransportCoordinates(item.longitude, item.latitude));                              ref.read(searchProviderStateProvider.notifier).clearSearch();                              _focusNode.unfocus();                              _controller.text = item.displayName;                            },                            child: ListTile(                              selectedColor: Colors.greenAccent,                              title: Text(                                item.displayName,                                style: const TextStyle(color: Colors.black, fontWeight: FontWeight.normal),                              ),                            ),                          );                        },                        separatorBuilder: (context, index) {                          return const Divider(color: Colors.blue);                        },                      );                    })))      ],    );  }}