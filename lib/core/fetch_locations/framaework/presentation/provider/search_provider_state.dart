import 'package:flutter_riverpod/flutter_riverpod.dart';import 'package:weatherdemo/core/fetch_locations/framaework/presentation/page/uiModels/fetch_location_state.dart';import 'package:weatherdemo/core/fetch_locations/uses_cases/fetch_locations_uses_case.dart';import 'package:weatherdemo/core/utils/extension_function/string_extension.dart';class SearchProviderState extends StateNotifier<FetchLocationState> {  final FetchLocationsUsesCase _fetchLocationsUsesCase;  SearchProviderState(this._fetchLocationsUsesCase) : super(const FetchLocationState());  Future<void> searchLocation(search) async {    state = state.copyWith(isLoading: true);    await _fetchLocationsUsesCase.invoke(search).then((response) {      state = state.copyWith(isLoading: false, locations: response);    }).onError((error, stackTrace) {      state = state.copyWith(isLoading: false);    });  }  void clearSearch() {    state = state.copyWith(locations: []);  }}