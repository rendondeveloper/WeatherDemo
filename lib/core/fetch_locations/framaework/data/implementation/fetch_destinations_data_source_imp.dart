import 'dart:convert' as convert;import 'package:http/http.dart' as http;import 'package:weatherdemo/core/fetch_locations/data/data_source/fetch_destinations_data_source.dart';import 'package:weatherdemo/core/fetch_locations/domain/models_domain/locations_domain.dart';import 'package:weatherdemo/core/fetch_locations/framaework/data/config/location.dart';import 'package:weatherdemo/core/fetch_locations/framaework/data/mapper/map_location_to_location_domain.dart';import 'package:weatherdemo/core/utils/base/pair.dart';const String _uriFetchLocations = "https://search.reservamos.mx/api/v2/places?q=";class FetchDataSourcesImp extends FetchDataSources {  final MapLocationToLocationDomain _mapLocationToLocationDomain;  FetchDataSourcesImp(this._mapLocationToLocationDomain);  @override  Future<Pair<List<LocationDomain>?, Exception?>> fetchLocations(String search) async {    late Pair<List<LocationDomain>?, Exception?> result;    try {      //TODO THIS layer http can be into the abstraction and only expose a method get      final response = await http.get(Uri.parse(_uriFetchLocations + search));      if (response.statusCode == 201) {        final dynamicList = (convert.jsonDecode(response.body) as List<dynamic>);        final listLocations = dynamicList.map((item) => Location.fromJson(item)).toList();        final list = listLocations.map((item) => _mapLocationToLocationDomain.map(item)).toList();        result = Pair(null, list);      } else {        result = Pair(Exception("Error al recuperar datos"), null);      }    } catch (ex) {      result = Pair(ex as Exception, null);    }    return result;  }}