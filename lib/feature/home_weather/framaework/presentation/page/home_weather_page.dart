import 'package:flutter/material.dart';import 'package:flutter/widgets.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import 'package:weatherdemo/core/fetch_locations/framaework/presentation/page/fetch_locations_page.dart';import 'package:weatherdemo/core/utils/commons/constants_app.dart';import 'package:weatherdemo/core/utils/commons/dimens_app.dart';import 'package:weatherdemo/core/utils/extension_function/context_extension.dart';import 'package:weatherdemo/feature/home_weather/framaework/di/fetch_weather_di.dart';import 'package:weatherdemo/feature/home_weather/framaework/presentation/page/uiModels/home_weather_state.dart';import 'package:weatherdemo/feature/home_weather/framaework/presentation/page/widgets/weather_current_card.dart';import 'package:weatherdemo/feature/home_weather/framaework/presentation/page/widgets/weather_future_card.dart';class HomeWeatherPage extends ConsumerStatefulWidget {  @override  ConsumerState<ConsumerStatefulWidget> createState() => _HomeWeatherPage();}class _HomeWeatherPage extends ConsumerState<HomeWeatherPage> {  @override  Widget build(BuildContext context) {    return WillPopScope(      onWillPop: () {        return Future.value(false);      },      child: Scaffold(        resizeToAvoidBottomInset: false,        appBar: AppBar(          centerTitle: true,          title: Text(context.getText().appName),        ),        body: Stack(          children: [            Container(                margin: const EdgeInsets.only(top: dimen40),                width: double.infinity,                child: StreamBuilder(                    stream: ref.watch(homeProviderStateProvider.notifier).stream,                    builder: (context, snapshot) {                      final stateHome = snapshot.hasData ? (snapshot.data as HomeWeatherState) : const HomeWeatherState();                      if (stateHome.isLoading) {                        return const Center(                          child: CircularProgressIndicator(),                        );                      } else if (stateHome.isEmpty) {                        return Column(                          children: [                            Image.network(                              urlImageEmpty,                              fit: BoxFit.fill,                              width: emptyScreenImageWidth,                              height: emptyScreenImageHeight,                            ),                            const SizedBox(height: dimen16,),                            Text(context.getText().homeWeatherCardMessageEmptyScreen,                                textAlign: TextAlign.center,                                style: const TextStyle(fontSize: fonSize18, fontStyle: FontStyle.italic, fontWeight: FontWeight.w500))                          ],                        );                      } else {                        return Column(                          children: [                            Flexible(                              fit: FlexFit.tight,                              flex: 2,                              child: Container(                                  width: double.infinity,                                  alignment: Alignment.center,                                  child: WeatherCurrentCard(weatherItem: stateHome.weather.weatherCurrent)),                            ),                            Flexible(                              flex: 3,                              child: ListView.builder(                                  shrinkWrap: true,                                  keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.onDrag,                                  itemCount: stateHome.weather.weatherFutureList.length,                                  scrollDirection: Axis.horizontal,                                  itemBuilder: (context, index) {                                    return WeatherFutureCard(weatherItem: stateHome.weather.weatherFutureList[index]);                                  }),                            ),                          ],                        );                      }                    })),            FetchLocationsPage((transport) {              ref.read(homeProviderStateProvider.notifier).searchWeather(transport.latitude, transport.longitude);            }),          ],        ),      ),    );  }}